Specifications for Patch Master for Azure

This script automates patch assessment and installation for Azure Virtual Machines and Azure Arc Connected Machines (Windows and Linux) using Azure PowerShell commands.

Supported Azure PowerShell commands:
- Invoke-AzVMPatchAssessment
- Invoke-AzVMInstallPatch
- Invoke-AzConnectedAssessMachinePatch
- Install-AzConnectedMachinePatch

Key Features:
- Supports both single server and batch (CSV) processing.
- Batch mode can run serially or in parallel (with -Jobs and optional -MaxJobs for concurrency control).
- Each parallel job writes to a unique log file: Job<Number>_<ServerName>-<date>.log.
- Supports patching for both Windows and Linux OS types.
- Allows filtering by patch classification for both Windows and Linux.
- Default action is to assess and install patches; can be overridden to assess only or install only.
- All actions, errors, and key events are logged with timestamps and server names.
- Logs include user and Az PowerShell module version at startup.
- Human-readable errors are logged, followed by full error details.
- Accepts server details via pipeline (future enhancement) and returns results via pipeline (future enhancement).

Parameter Sets:
- Single server mode: specify -ResourceGroupName and -ServerName.
- CSV mode: specify -CSVPath (cannot be used with -ResourceGroupName or -ServerName).

CSV Columns:
- Order: (optional) The order in which servers are processed. If not present, processes in file order.
- ServerName: (required) Maps to -ServerName.
- ResourceGroupName: (required) Maps to -ResourceGroupName.
- Action: (optional) AssessOnly | InstallOnly | Both/blank (default: assess and install).
- MaximumDuration: (optional) Maps to -MaximumDuration.
- RebootSetting: (optional) Maps to -RebootSetting.
- WindowsClassificationsToInclude: (optional) Maps to -WindowsClassificationsToInclude.
- LinuxClassificationsToInclude: (optional) Maps to -LinuxClassificationsToInclude.

CSV Processing:
- If ServerName or ResourceGroupName is missing in a row, the row is skipped and an error is logged.
- If Action, MaximumDuration, RebootSetting, WindowsClassificationsToInclude, or LinuxClassificationsToInclude are blank, the script's default is used.
- In parallel mode, the script calls itself as a job for each server, monitors all jobs, and waits for completion.
- If -MaxJobs is set, limits the number of concurrent jobs.

Logging Requirements:
- Default log location: C:\programfiles\GDMTT\Logs\<scriptname>-<date>.log
- Parallel jobs: C:\programfiles\GDMTT\Logs\Invoke-PatchAzureMachines-Job<Number>_<ServerName>-<date>.log
- Log format: <Time Stamp> <Server Name> <Log record type Info|Warn|Error> <log message>
- Log file path can be overridden with -LogFilePath.
- Logs user and Az PowerShell module version at startup.
- All actions and errors are logged, with human-readable and full error details.

CSV Reporting Requirements (UPDATED):
- Assessment results are written to: C:\ProgramData\GDMTT\Reporting\Invoke-PatchAzureMachines-Assessment.csv
- Install results are written to:    C:\ProgramData\GDMTT\Reporting\Invoke-PatchAzureMachines-Install.csv
- Each CSV includes all output properties as columns.
- The Install CSV lists installed patch names in the Patches column (semicolon-separated).

Examples:
- Single server: .\Invoke-PatchAzureMachines.ps1 -ResourceGroupName 'MyRG' -ServerName 'MyVM'
- Batch CSV: .\Invoke-PatchAzureMachines.ps1 -CSVPath .\servers.csv
- Parallel jobs: .\Invoke-PatchAzureMachines.ps1 -CSVPath .\servers.csv -Jobs -MaxJobs 3


